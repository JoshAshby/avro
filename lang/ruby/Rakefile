# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'rubygems'
require "rake/testtask"

Rake::TestTask.new do |t|
  t.libs << "lib"
  t.libs << "test"
  t.pattern = "test/**/test_*.rb"
  t.warning = false
end

Rake::TestTask.new(:interop) do |t|
  t.pattern = 'interop/test*.rb'
  t.warning = false
end

task :default => :test

desc "Writes out the version file using the shared version number"
task :version do
  version_text = File.open('../../share/VERSION.txt').read.sub('-SNAPSHOT', '.pre1').chomp
  version_file = Pathname.new(__FILE__).parent.join('lib', 'avro', 'version.rb')

  version_file.write <<-RUBY
module Avro
  VERSION = "#{ version_text }".freeze
end
  RUBY
end

desc "Generates the ruby interop files to test against"
task :generate_interop do
  here_dir = Pathname.new(__FILE__).parent

  share_dir = here_dir.join '/../../share'
  schemas_dir = share_dir.join '/test/schemas'
  build_dir = here_dir.join '/../../build'

  $:.unshift here_dir.join('/lib')
  $:.unshift here_dir.join('/test')

  require 'avro'
  require 'random_data'

  schema = Avro::Schema.parse(File.read(schemas_dir + '/interop.avsc'))

  random_data = RandomData.new(schema, ENV['SEED'])
  file_handle = build_dir.join('/interop/data/ruby.avro').open('w')

  arvo_writer = Avro::DataFile::Writer.new(file_handle, Avro::IO::DatumWriter.new(schema), schema)

  begin
    arvo_writer << random_data.next
    arvo_writer << random_data.next
  ensure
    arvo_writer.close
  end

  Avro::DataFile.open(build_dir.join('/interop/data/ruby_deflate.avro'), 'w', schema.to_s, :deflate) do |data_file|
    20.times { data_file << random_data.next }
  end
end
